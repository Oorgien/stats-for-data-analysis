#%%
import numpy as np
import pandas as pd
from scipy import stats
from statsmodels.stats.proportion import proportion_confint
# По данным опроса, 75% работников ресторанов утверждают, что испытывают на работе существенный стресс,
# оказывающий негативное влияние на их личную жизнь. Крупная ресторанная сеть опрашивает 100 своих работников,
# чтобы выяснить, отличается ли уровень стресса работников в их ресторанах от среднего. 67 из 100 работников
# отметили высокий уровень стресса.
# Посчитайте достигаемый уровень значимости, округлите ответ до четырёх знаков после десятичной точки.
#%%
p = 0.75
n_stress = 67
n = 100
print ("Confidence level: ", np.round(stats.binom_test(n_stress, n, p, alternative = "two-sided"), 4))

#%%
# The Wage Tract — заповедник в округе Тома, Джорджия, США, деревья в котором не затронуты деятельностью
# человека со времён первых поселенцев. Для участка заповедника размером 200х200 м имеется информация о
# координатах сосен (sn — координата в направлении север-юг, we — в направлении запад-восток, обе от 0 до 200).
# Проверим, можно ли пространственное распределение сосен считать равномерным, или они растут кластерами.
# Загрузите данные, поделите участок на 5х5 одинаковых квадратов размера 40x40 м, посчитайте количество сосен в
# каждом квадрате (чтобы получить такой же результат, как у нас, используйте функцию
# scipy.stats.binned_statistic_2d).
# Если сосны действительно растут равномерно, какое среднее ожидаемое количество сосен в каждом квадрате?
# В правильном ответе два знака после десятичной точки.

import scipy
pines = open('week1/Tasks/pines.txt', 'r')
data = [x.strip('\n').split('\t') for x in pines.readlines()][1:]
data = [(float(x[0]), float(x[1])) for x in data]
data = np.array(data)

print("Mean pine number per square: ", float(len(data)) / 25)

#%%
# Чтобы сравнить распределение сосен с равномерным, посчитайте значение статистики
# хи-квадрат для полученных 5х5 квадратов.
# Округлите ответ до двух знаков после десятичной точки.
stats_ = scipy.stats.binned_statistic_2d(data[:, 0], data[:, 1], None, statistic="count", bins=5)
stats.chisquare(stats_.statistic.reshape(-1), [len(data) / 25 for i in range(25)], ddof=0)